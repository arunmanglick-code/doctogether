// You need to have completed the "Loading Data" Labs prior to running
// this lab. This lab also uses the "redshift-query-benchmark.xlsx"
// spreadsheet… open it

// SELECT TOO MUCH DATA
select * from lineorder; // too big!

// CREATE TABLE AS SELECT
create table customer_asai as select * from customer where c_region = "ASIA";
// BLOWS UP, DOUBLE QUOTES
create table customer_asai as select * from customer where c_region = 'ASIA';
// OOPS… NAMED IT WRONG… EASY FIX
alter table customer_asai rename to customer_asia;
select count(*) from customer;
select count(*) from customer_asia;

// SHOW TABLES
select distinct(tablename) from pg_table_def where schemaname = 'public';

// BETWEEN CLAUSE (ORDERS ON DEC 1st, 1994)
select * from lineorder where lo_orderdate between 19941201 and 19941202;

// CAREFUL WITH PULLING LOTS OF DATA DIRECTLY OUT OF REDSHIFT
select count(*) from lineorder where lo_orderdate between 19941201 and 19941202;


// NOW LET'S LOOK AT THE IMPACT OF OUR SORT KEYS, DISTRIBUTION KEYS, AND ENCODING TYPES

// MUCH MORE INFO ON QUERY OPTIMIZATION AVAILABLE AT:
// http://docs.aws.amazon.com/redshift/latest/dg/c-query-tuning.html
// http://docs.aws.amazon.com/redshift/latest/dg/tutorial-tuning-tables-test-performance.html

// RUN THE FOLLOWING QUERIES TWICE… THE FIRST TIME, THEY COMPILE, AND THE SECOND TIME
// IS THEIR RAW RUN TIME. IMPORTANT TO RECORD THE SPEED OF THE QUERY THE SECOND TIME IT RUNS

// NOTE: NONE OF THE TABLES HAVE ANY SORT KEYS ON THEM AT ALL

// Q1: RESTRICTION ON ONE DIMENSION
select sum(lo_extendedprice*lo_discount) as revenue
from lineorder, dwdate
where lo_orderdate = d_datekey
and d_year = 1997 
and lo_discount between 1 and 3 
and lo_quantity < 24;

// Q2: RESTRICTION ON TWO DIMENSIONS
select sum(lo_revenue), d_year, p_brand1
from lineorder, dwdate, part, supplier
where lo_orderdate = d_datekey
and lo_partkey = p_partkey
and lo_suppkey = s_suppkey
and p_category = 'MFGR#12'
and s_region = 'AMERICA'
group by d_year, p_brand1
order by d_year, p_brand1;

// Q3: DRILL DOWN TO JUST ONE MONTH'S WORTH OF DATA IN JUST ONCE CITY
select c_city, s_city, d_year, sum(lo_revenue) as revenue 
from customer, lineorder, supplier, dwdate
where lo_custkey = c_custkey
and lo_suppkey = s_suppkey
and lo_orderdate = d_datekey
and (c_city='UNITED KI1' or
c_city='UNITED KI5')
and (s_city='UNITED KI1' or
s_city='UNITED KI5')
and d_yearmonth = 'Dec1997'
group by c_city, s_city, d_year
order by d_year asc, revenue desc;

// WHAT WOULD MAKE GOOD SORT KEYS BASED ON THOSE 3 QUERIES?
// UPDATE YOUR SELECTIONS FOR SORT KEY IN THE EXCEL WORKSHEET.

// WHAT WOULD MAKE GOOD DISTRIBUTION KEYS BASED ON THOSE 3 QUERIES?
// UPDATE YOUR SELECTIONS FOR SORT KEY IN THE EXCEL WORKSHEET.

// LETS GO AHEAD & DROP ALL EXISTING TABLES
drop table part cascade;
drop table supplier cascade;
drop table customer cascade;
drop table dwdate cascade;
drop table lineorder cascade;

// RE-CREATE TABLES WITH SPECIFIED DISTKEY AND SORTKEY
CREATE TABLE part (
  p_partkey     	integer     	not null	sortkey distkey,
  p_name        	varchar(22) 	not null,
  p_mfgr        	varchar(6)      not null,
  p_category    	varchar(7)      not null,
  p_brand1      	varchar(9)      not null,
  p_color       	varchar(11) 	not null,
  p_type        	varchar(25) 	not null,
  p_size        	integer     	not null,
  p_container   	varchar(10)     not null
);

CREATE TABLE supplier (
  s_suppkey     	integer        not null sortkey,
  s_name        	varchar(25)    not null,
  s_address     	varchar(25)    not null,
  s_city        	varchar(10)    not null,
  s_nation      	varchar(15)    not null,
  s_region      	varchar(12)    not null,
  s_phone       	varchar(15)    not null)
diststyle all;

CREATE TABLE customer (
  c_custkey     	integer        not null sortkey,
  c_name        	varchar(25)    not null,
  c_address     	varchar(25)    not null,
  c_city        	varchar(10)    not null,
  c_nation      	varchar(15)    not null,
  c_region      	varchar(12)    not null,
  c_phone       	varchar(15)    not null,
  c_mktsegment      varchar(10)    not null)
diststyle all;

CREATE TABLE dwdate (
  d_datekey            integer       not null sortkey,
  d_date               varchar(19)   not null,
  d_dayofweek	      varchar(10)   not null,
  d_month      	    varchar(10)   not null,
  d_year               integer       not null,
  d_yearmonthnum       integer  	 not null,
  d_yearmonth          varchar(8)	not null,
  d_daynuminweek       integer       not null,
  d_daynuminmonth      integer       not null,
  d_daynuminyear       integer       not null,
  d_monthnuminyear     integer       not null,
  d_weeknuminyear      integer       not null,
  d_sellingseason      varchar(13)    not null,
  d_lastdayinweekfl    varchar(1)    not null,
  d_lastdayinmonthfl   varchar(1)    not null,
  d_holidayfl          varchar(1)    not null,
  d_weekdayfl          varchar(1)    not null)
diststyle all;

CREATE TABLE lineorder (
  lo_orderkey      	    integer     	not null,
  lo_linenumber        	integer     	not null,
  lo_custkey           	integer     	not null,
  lo_partkey           	integer     	not null distkey,
  lo_suppkey           	integer     	not null,
  lo_orderdate         	integer     	not null sortkey,
  lo_orderpriority     	varchar(15)     not null,
  lo_shippriority      	varchar(1)      not null,
  lo_quantity          	integer     	not null,
  lo_extendedprice     	integer     	not null,
  lo_ordertotalprice   	integer     	not null,
  lo_discount          	integer     	not null,
  lo_revenue           	integer     	not null,
  lo_supplycost        	integer     	not null,
  lo_tax               	integer     	not null,
  lo_commitdate         integer         not null,
  lo_shipmode          	varchar(10)     not null
);

// COPY & PASTE THE "COPY" STATEMENTS FROM YOUR 'data-loading-lab-instructions.txt' file & then remove the 'compupdate off' parameter

copy dwdate from 's3://awssampledbuswest2/ssbgz/dwdate'
credentials 'aws_access_key_id=AKIAITDF6KWO5JNU4IHQ;aws_secret_access_key=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'
gzip

copy part from 's3://awssampledbuswest2/ssbgz/part'
credentials 'aws_access_key_id=AKIAITDF6KWO5JNU4IHQ;aws_secret_access_key=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'
gzip

copy supplier from 's3://awssampledbuswest2/ssbgz/supplier'
credentials 'aws_access_key_id=AKIAITDF6KWO5JNU4IHQ;aws_secret_access_key=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'
gzip

copy customer from 's3://awssampledbuswest2/ssbgz/customer'
credentials 'aws_access_key_id=AKIAITDF6KWO5JNU4IHQ;aws_secret_access_key=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'
gzip

copy lineorder from 's3://awssampledbuswest2/ssbgz/lineorder'
credentials 'aws_access_key_id=AKIAITDF6KWO5JNU4IHQ;aws_secret_access_key=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'
gzip


// RE-RUN ALL OF THOSE COPY STATEMENTS AS A BULK OPERATION INTO SQL WORKBENCH (SHOULD TAKE 10 - 15 MINS)

// RE-RUN THE QUERIES ABOVE TO CHECK THEIR PERFORMANCE